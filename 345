// Round Robin

#include <stdio.h>
#include <conio.h>

void main()
{
    int i, NOP, sum = 0, count = 0, y, quant, wt = 0, tat = 0, at[10], bt[10], temp[10];
    float avg_wt, avg_tat;
    printf(" Total number of process in the system: ");
    scanf("%d", &NOP);
    y = NOP;
    for (i = 0; i < NOP; i++)
    {
        printf("\n Enter the Arrival and Burst time of the Process[%d]\n", i + 1);
        printf(" Arrival time is: \t"); // Accept arrival time
        scanf("%d", &at[i]);
        printf(" \nBurst time is: \t"); // Accept the Burst time
        scanf("%d", &bt[i]);
        temp[i] = bt[i]; // store the burst time in temp array
    }
    // Accept the Time qunat
    printf("Enter the Time Quantum for the process: \t");
    scanf("%d", &quant);
    // Display the process No, burst time, Turn Around Time and the waiting time
    printf("\n Process No \t\t Burst Time \t\t TAT \t\t Waiting Time ");
    for (sum = 0, i = 0; y != 0;)
    {
        if (temp[i] <= quant && temp[i] > 0) // define the conditions
        {
            sum = sum + temp[i];
            temp[i] = 0;
            count = 1;
        }
        else if (temp[i] > 0)
        {
            temp[i] = temp[i] - quant;
            sum = sum + quant;
        }
        if (temp[i] == 0 && count == 1)
        {
            y--; // decrement the process no.
            printf("\nProcess No[%d] \t\t %d\t\t\t\t %d\t\t\t %d", i + 1, bt[i], sum - at[i], sum - at[i] - bt[i]);
            wt = wt + sum - at[i] - bt[i];
            tat = tat + sum - at[i];
            count = 0;
        }
        if (i == NOP - 1)
        {
            i = 0;
        }
        else if (at[i + 1] <= sum)
        {
            i++;
        }
        else
        {
            i = 0;
        }
    }
    avg_wt = wt * 1.0 / NOP;
    avg_tat = tat * 1.0 / NOP;
    printf("\n Average Turn Around Time: \t%f", avg_wt);
    printf("\n Average Waiting Time: \t%f", avg_tat);
    getch();
}

// Priority

#include <stdio.h>

void priorityScheduling(int processID[], int arrivalTime[], int burstTime[], int priority[], int n)
{
    int completionTime[n], turnaroundTime[n], waitingTime[n];
    int currentTime = 0;

    // Initialize burst time and completion status
    int remainingBurstTime[n];
    int isCompleted[n];
    for (int i = 0; i < n; i++)
    {
        remainingBurstTime[i] = burstTime[i];
        isCompleted[i] = 0;
    }

    while (1)
    {
        int highestPriority = 9999; // Set a high initial value
        int highestPriorityIndex = -1;

        // Find the process with the highest priority among the arrived and incomplete processes
        for (int i = 0; i < n; i++)
        {
            if (arrivalTime[i] <= currentTime && priority[i] < highestPriority && !isCompleted[i])
            {
                highestPriority = priority[i];
                highestPriorityIndex = i;
            }
        }

        if (highestPriorityIndex == -1)
            break; // All processes have been completed

        // Execute the selected process
        currentTime += remainingBurstTime[highestPriorityIndex];
        completionTime[highestPriorityIndex] = currentTime;
        turnaroundTime[highestPriorityIndex] = completionTime[highestPriorityIndex] - arrivalTime[highestPriorityIndex];
        waitingTime[highestPriorityIndex] = turnaroundTime[highestPriorityIndex] - burstTime[highestPriorityIndex];
        isCompleted[highestPriorityIndex] = 1;
    }

    // Print the table with completion time, turnaround time, and waiting time
    printf("Process\t Arrival Time\t Burst Time\t Completion Time\t Turnaround Time\t Waiting Time\n");
    for (int i = 0; i < n; i++)
    {
        printf("%d\t\t %d\t\t %d\t\t %d\t\t\t %d\t\t\t %d\n", processID[i], arrivalTime[i], burstTime[i],
               completionTime[i], turnaroundTime[i], waitingTime[i]);
    }
}
int main()
{
    // Example usage
    int processID[] = {1, 2, 3, 4};
    int arrivalTime[] = {0, 2, 4, 6};
    int burstTime[] = {4, 3, 5, 2};
    int priority[] = {5, 4, 2, 3};
    int numProcesses = sizeof(processID) / sizeof(processID[0]);

    priorityScheduling(processID, arrivalTime, burstTime, priority, numProcesses);

    return 0;
}

// SRTF

#include <stdio.h>

int main()
{
    int n, at[10], bt[10], total = 0, i, j, small, temp, procs[100], k, wt[10], finish[10];
    float tavg = 0.0, wavg = 0.0;

    printf("ENTER THE NUMBER OF PROCESSES:");
    scanf("%d", &n);

    for (i = 0; i < n; i++)
    {
        printf("ENTER THE ARRIVAL TIME OF PROCESS %d:\t", i);
        scanf("%d", &at[i]);
        printf("ENTER THE BURST TIME OF PROCESS %d:\t", i);
        scanf("%d", &bt[i]);
        wt[i] = 0;
        total += bt[i];
    }

    for (i = 0; i < n; i++)
    {
        for (j = i + 1; j < n; j++)
        {
            if (at[i] > at[j])
            {
                temp = at[i];
                at[i] = at[j];
                at[j] = temp;
                temp = bt[i];
                bt[i] = bt[j];
                bt[j] = temp;
            }
        }
    }

    for (i = 0; i < total; i++)
    {
        small = 3200;
        for (j = 0; j < n; j++)
        {
            if ((bt[j] != 0) && (at[j] <= i) && (bt[j] < small))
            {
                small = bt[j];
                k = j;
            }
        }
        bt[k]--;
        procs[i] = k;
    }

    k = 0;

    printf("\nPROCESS\tCOMPLETION TIME\tTURNAROUND TIME\tWAITING TIME\n");

    for (i = 0; i < total; i++)
    {
        for (j = 0; j < n; j++)
        {
            if (procs[i] == j)
            {
                finish[j] = i;
                wt[j]++;
            }
        }
    }

    for (i = 0; i < n; i++)
    {
        int turnaroundTime = (finish[i] - at[i]) + 1;
        int waitingTime = ((finish[i] + 1) - wt[i]) - at[i];
        printf("%d\t\t%d\t\t%d\t\t%d\n", i + 1, finish[i] + 1, turnaroundTime, waitingTime);
        wavg += waitingTime;
        tavg += turnaroundTime;
    }

    printf("\nAverage Waiting Time: %f\n", wavg / n);
    printf("Average Turnaround Time: %f\n", tavg / n);

    return 0;
}

// SJF

#include<stdio.h>
int main() {
    int sum_bt = 0;
    int sumt = 0, sumw = 0;
    int n;
    printf("enter number of process : ");
    scanf("%d",&n);
    int bt[n];
    int at[n];
    int ct[n];
    for(int i = 0;i<n;i++){
        printf("enter arrival time of process %d",i+1);
        scanf("%d",&at[i]);
        printf("enter burst time of process %d",i+1);
        scanf("%d",&bt[i]);
        sum_bt += bt[i];
    }
    printf("PID\t\tCT\t\tTAT\t\tWT\n");
    for (int time = 0; time < sum_bt; ) {
        int smallest = 9;
        for (int i = 0; i < n; i++) {
            if (at[i] <= time && bt[i] > 0 && bt[i] < bt[smallest])
                smallest = i;
        }    
        ct[smallest] = time + bt[smallest];
        printf("P%d\t|\t%d\t|\t%d\t|\t%d\n", smallest + 1, ct[smallest], ct[smallest] - at[smallest], ct[smallest] - at[smallest] - bt[smallest]);   
        sumt += ct[smallest] - at[smallest];
        sumw += ct[smallest] - at[smallest] - bt[smallest];    
        time += bt[smallest];
        bt[smallest] = 0;
    }
    return 0;
}


// FCFS

#include <stdio.h>
#include <string.h>
int main()
{
    printf("FCFS\n");
    printf("Enter number of processes:");
    int n;
    scanf("%d", &n);
    int pid[n], at[n], bt[n], ct[n], tat[n], wt[n];
    for (int i = 0; i < n; i++)
    {
        printf("Enter process id:");
        scanf("%s", &pid[i]);
        printf("Enter Arrival Time:");
        scanf("%d", &at[i]);
        printf("Enter burst time:");
        scanf("%d", &bt[i]);
    }
    for (int i = 0; i < n; i++)
    {
        for (int j = i + 1; j < n; j++)
        {
            if (at[i] > at[j])
            {
                int temp = at[i];
                at[i] = at[j];
                at[j] = temp;
                char temp1 = pid[i];
                pid[i] = pid[j];
                pid[j] = temp1;
                int temp2 = bt[i];
                bt[i] = bt[j];
                bt[j] = temp2;
            }
        }
    }
    int ttime = bt[0];
    ct[0] = bt[0];
    tat[0] = ct[0] - at[0];
    wt[0] = tat[0] - bt[0];
    for (int i = 1; i < n; i++)
    {
        if (at[i] > ttime)
        {
            ct[i] = (at[i] - bt[i - 1]) + ttime + bt[i];
            ttime += at[i] - bt[i - 1];
        }
        else
        {
            ct[i] = ttime + bt[i];
        }
        ttime += bt[i];
        tat[i] = ct[i] - at[i];
        wt[i] = tat[i] - bt[i];
    }
    printf("pid at bt ct tat wt\n");
    for (int i = 0; i < n; i++)
    {
        printf(" %c %d %d %d %d %d\n", pid[i], at[i], bt[i], ct[i], tat[i], wt[i]);
    }
}


//Main and Exec

#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>
#include <string.h>

int main() {
    printf("Main Process\n");
    int n;
    printf("Enter the number of elements: ");
    scanf("%d", &n);
    int arr[n];
    for (int i = 0; i < n; i++) {
        scanf("%d", &arr[i]);
    }
    char *args[n+2];
    args[0] = "/home/kali/sum";
    args[1] = "sum";
    for (int i = 0; i < n; i++) {
        char str[16];
        sprintf(str, "%d", arr[i]);
        args[i+2] = strdup(str);
    }
    args[n+2] = NULL;
    execv(args[0], args);
    perror("Exec failed");
    return 1;
}


#include<stdio.h>
#include<stdlib.h>
#include<unistd.h>
void main(int argc, char *argv[]){
    printf("Exec Process");
    int arr1[6];
    for(int i=0;i<6;i++){
        arr1[i]=atoi(argv[i+1]);
    }
    int sum=0;
    for(int i=0;i<6;i++){
        sum+=arr1[i];
    }
    printf("sum:%d",sum);
}


//PIPES

#include <stdio.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>

struct Arrays {
    int a[10];
    int b[20];
    int c[30];
};

int main() {
    int fd[2];
    pipe(fd);

    struct Arrays data;
    for (int i = 0; i < 10; i++) {
        data.a[i] = i + 10;
        data.b[i] = i + 100;
        data.c[i] = i + 1000;
    }

    pid_t p = fork();

    if (p > 0) {
        // Parent process
        close(fd[0]); // Close the read end of the pipe
        write(fd[1], &data, sizeof(struct Arrays)); // Write the entire structure to the pipe
        close(fd[1]); // Close the write end of the pipe
        wait(NULL); // Wait for the child process to finish
    } else if (p == 0) {
        // Child process
        close(fd[1]); // Close the write end of the pipe
        struct Arrays received_data;
        int n = read(fd[0], &received_data, sizeof(struct Arrays)); // Read the entire structure from the pipe
        close(fd[0]); // Close the read end of the pipe

        // Print the received arrays
        for (int i = 0; i < 10; i++) {
            printf("%d ", received_data.a[i]);
        }
        printf("\n");

        for (int i = 0; i < 10; i++) {
            printf("%d ", received_data.b[i]);
        }
        printf("\n");

        for (int i = 0; i < 10; i++) {
            printf("%d ", received_data.c[i]);
        }
        printf("\n");
    }

    return 0;
}
